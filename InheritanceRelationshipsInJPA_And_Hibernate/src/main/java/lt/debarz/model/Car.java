package main.java.lt.debarz.model;

import lombok.Data;

import javax.persistence.*;

/**
 * Inheritance strategy #1: Mapped Superclass:
 *
 * The Car class is annotated with the @MappedSuperclass annotation and defines common car attributes,
 * such as the make, model, and year, as well as the autogenerated id of the car.
 * The Mapped Superclass strategy is simple but limited, in that both of these classes will map to tables that contain
 * all of the car attributes: both the original Car attributes and new, specialized class attributes.
 *
 * Using this pattern means Hibernate won't be able to run polymorphic queries against individual cars.
 * If we define a CarDealer class that manages different types of cars, there's no way to maintain a list of Cars
 * in the CarDealer; instead we would need to create a list of SportsCars and a list of SportUtilityVehicles.
 * */

/**
 * Inheritance strategy #2: Table Per Class:
 *
 * We define the base class as an entity, using the @Entity annotation. We then introduce the @Inheritance annotation,
 * specifying the InstanceType.TABLE_PER_CLASS strategy.
 *
 * With this strategy, we're able to execute polymorphic queries, so we can map a list of Cars to a CarDealer.
 *
 * We define the base class as an entity, using the @Entity annotation. We then introduce the @Inheritance annotation, specifying the InstanceType.TABLE_PER_CLASS strategy.
 *
 * With this strategy, we're able to execute polymorphic queries, so we can map a list of Cars to a CarDealer.
 * */
/**
 *
 * */

//@MappedSuperclass
@Data
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Car {
    @Id
    @GeneratedValue
    private Integer id;
    private String make;
    private String model;
    private Integer year;
}
